name: CHOCOLATINE
env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-DOP-200-NCE-2-1-chocolatine-maxime.mallet.git"
  EXECUTABLES: "push_swap"

on:
  push:
    branches-ignore:  [ "ga-ignore-**" ]
  pull_request:
    branches-ignore: [ "ga-ignore-**" ]
  workflow_dispatch:
jobs:
  check_repository_cleanliness:
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
      - run: |
          unwanted=$(find -- * \( -name "#*#" -or -name "*~" -or -iname "*pain_au_chocolat*" -or -name "*.o" -or -name "*.a" -or -name "*.so" -or -name "*.gcno" -or -name "*.gcda" -or -name "gcov" -or -path "*tmp*/*" \))
          unwanted_count=$(printf "$unwanted" | wc -c)
          if ! [ "$unwanted_count" -eq 0 ]; then
            echo "$unwanted" | while read -r fname;do
              echo "::error file=$fname,line=1::Unwanted file detected"
              done
            echo "::error::Checks if the repository is clean and void of any unwanted files (temp files, binary files, etc.)"
            exit 1
          fi
  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [check_repository_cleanliness]
    if: success()
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
      - name: run_make
        timeout-minutes: 2
        run: |
          make
      - name: run_clean
        run: |
          make clean
      - name: check_executables_step
        run: |
          for i in $(echo $EXECUTABLES | tr "," "\n")
          do
            if ! [[ -x "$i" ]]
            then
              echo "::error::$i: Executable file not found !"
              exit 1
            fi
          done
  run_tests:
    runs-on: ubuntu-latest
    needs: [check_program_compilation]
    continue-on-error: false
    container:
      image: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
      - name: run_test_step
        timeout-minutes: 2
        run: |
          make tests_run
  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [run_tests]
    if: ${{ github.event_name == 'push' }} && success()
    steps:
      - uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: "${{ env.MIRROR_URL }}"
          ssh_private_key: "${{ secrets.SSH_PRIVATE_KEY }}"
